name: Automated Docker Build Main Push AWS Dev

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md**'
    branches: [main]

jobs:
  build-and-push-aws:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3
      - name: Get tag
        run: echo "RELEASE_VERSION=${GITHUB_REF:10}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # tag=v1
        with:
          aws-access-key-id: ${{ secrets.GHA_ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GHA_ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.GHA_ECR_ROLE_ASSUMPTION }}
          role-skip-session-tagging: true
          role-duration-seconds: '3600'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@9149ade017c57f86dea2f76a01f8b2d5bd06b10f # tag=v1

      - name: Login to ECR
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # tag=v2
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # tag=v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}
          tags: |
            type=sha,prefix=,format=long
          flavor: |
            latest=false
      - uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # tag=v2
        id: buildx
        with:
          install: true

      - name: Rename certs
        id: certs
        env:
          DEV_CERT: ${{ secrets.SAML_CERT }}
          TEST_CERT: ${{ secrets.C1_TEST_SAML_CERT }}
          PROD_CERT: ${{ secrets.C1_PROD_SAML_CERT }}
        run: |
          echo $DEV_CERT > dev-saml.pem
          echo $TEST_CERT > test-saml.pem
          echo $PROD_CERT > prod-saml.pem

      - name: Build and push
        uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94 # tag=v3
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/portal-client:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD=${{ github.sha }}

      - name: Snapshot DocumentDB Cluster
        env:
          DOCDB_CLUSTER_IDENTIFIER: ${{ secrets.DOCDB_CLUSTER_IDENTIFIER }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ./scripts/snapshot-docdb.sh

      - name: Download task definition | Update Task Definition | Update ECS Service | Deploy new image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: portal-client
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ./scripts/deploy-dev-aws.sh

  trivy-scan-image:
    needs: build-and-push-aws
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # tag=v1
        with:
          aws-access-key-id: ${{ secrets.GHA_ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GHA_ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.GHA_ECR_ROLE_ASSUMPTION }}
          role-skip-session-tagging: true
          role-duration-seconds: '3600'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@9149ade017c57f86dea2f76a01f8b2d5bd06b10f # tag=v1

      - name: Aqua Security Trivy
        id: scan-aws-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: portal-client
          IMAGE_TAG: ${{ github.sha }}
        uses: aquasecurity/trivy-action@1db49f532692e649dc5dc43c7c0444dac4790137 # tag=0.7.0
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/portal-client:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@2ca79b6fa8d3ec278944088b4aa5f46912db5d63 # tag=v2
        with:
          sarif_file: 'trivy-results.sarif'
