{"version":3,"file":"main.e198912d.iframe.bundle.js","mappings":";;;;;;;;;;;;;AAKA;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACwOA;;;;;;;;;;;;;;;;;;;;;ACvLA;;;;;;ACVA;;;;;;ACJA","sources":["webpack://ussf-portal/./src/operations/portal/mutations/addWidget.g.ts","webpack://ussf-portal/./src/operations/portal/mutations/editCollection.g.ts","webpack://ussf-portal/./src/components/MySpace/MySpace.tsx","webpack://ussf-portal/./src/operations/portal/mutations/addBookmark.g.ts","webpack://ussf-portal/./src/operations/portal/mutations/removeBookmark.g.ts","webpack://ussf-portal/./src/operations/portal/mutations/removeCollection.g.ts"],"sourcesContent":["/* istanbul ignore file */\nimport * as Types from '../../../graphql.g';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type AddWidgetMutationVariables = Types.Exact<{\n  title: Types.Scalars['String'];\n  type: Types.WidgetType;\n}>;\n\n\nexport type AddWidgetMutation = { __typename?: 'Mutation', addWidget?: { __typename?: 'Collection', _id: any, title: string, type: Types.WidgetType } | { __typename?: 'FeaturedShortcuts', _id: any, title: string, type: Types.WidgetType } | { __typename?: 'GuardianIdeal', _id: any, title: string, type: Types.WidgetType } | { __typename?: 'NewsWidget', _id: any, title: string, type: Types.WidgetType } | null };\n\n\nexport const AddWidgetDocument = gql`\n    mutation addWidget($title: String!, $type: WidgetType!) {\n  addWidget(title: $title, type: $type) {\n    _id\n    title\n    type\n  }\n}\n    `;\nexport type AddWidgetMutationFn = Apollo.MutationFunction<AddWidgetMutation, AddWidgetMutationVariables>;\n\n/**\n * __useAddWidgetMutation__\n *\n * To run a mutation, you first call `useAddWidgetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddWidgetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addWidgetMutation, { data, loading, error }] = useAddWidgetMutation({\n *   variables: {\n *      title: // value for 'title'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useAddWidgetMutation(baseOptions?: Apollo.MutationHookOptions<AddWidgetMutation, AddWidgetMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddWidgetMutation, AddWidgetMutationVariables>(AddWidgetDocument, options);\n      }\nexport type AddWidgetMutationHookResult = ReturnType<typeof useAddWidgetMutation>;\nexport type AddWidgetMutationResult = Apollo.MutationResult<AddWidgetMutation>;\nexport type AddWidgetMutationOptions = Apollo.BaseMutationOptions<AddWidgetMutation, AddWidgetMutationVariables>;","/* istanbul ignore file */\nimport * as Types from '../../../graphql.g';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type EditCollectionMutationVariables = Types.Exact<{\n  _id: Types.Scalars['OID'];\n  title: Types.Scalars['String'];\n  bookmarks?: Types.InputMaybe<Array<Types.BookmarkReorderInput> | Types.BookmarkReorderInput>;\n}>;\n\n\nexport type EditCollectionMutation = { __typename?: 'Mutation', editCollection?: { __typename?: 'Collection', _id: any, title: string, bookmarks?: Array<{ __typename?: 'Bookmark', _id: any, url: string, label?: string | null, cmsId?: string | null, isRemoved?: boolean | null }> | null } | null };\n\n\nexport const EditCollectionDocument = gql`\n    mutation editCollection($_id: OID!, $title: String!, $bookmarks: [BookmarkReorderInput!]) {\n  editCollection(_id: $_id, title: $title, bookmarks: $bookmarks) {\n    _id\n    title\n    bookmarks {\n      _id\n      url\n      label\n      cmsId\n      isRemoved\n    }\n  }\n}\n    `;\nexport type EditCollectionMutationFn = Apollo.MutationFunction<EditCollectionMutation, EditCollectionMutationVariables>;\n\n/**\n * __useEditCollectionMutation__\n *\n * To run a mutation, you first call `useEditCollectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditCollectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editCollectionMutation, { data, loading, error }] = useEditCollectionMutation({\n *   variables: {\n *      _id: // value for '_id'\n *      title: // value for 'title'\n *      bookmarks: // value for 'bookmarks'\n *   },\n * });\n */\nexport function useEditCollectionMutation(baseOptions?: Apollo.MutationHookOptions<EditCollectionMutation, EditCollectionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<EditCollectionMutation, EditCollectionMutationVariables>(EditCollectionDocument, options);\n      }\nexport type EditCollectionMutationHookResult = ReturnType<typeof useEditCollectionMutation>;\nexport type EditCollectionMutationResult = Apollo.MutationResult<EditCollectionMutation>;\nexport type EditCollectionMutationOptions = Apollo.BaseMutationOptions<EditCollectionMutation, EditCollectionMutationVariables>;","import React from 'react'\nimport { useFlags } from 'launchdarkly-react-client-sdk'\nimport { Grid } from '@trussworks/react-uswds'\nimport { useRouter } from 'next/router'\nimport { gql } from '@apollo/client'\nimport { WidgetType as AddWidgetType } from '../../graphql.g'\nimport styles from './MySpace.module.scss'\n\nimport { useAddBookmarkMutation } from 'operations/portal/mutations/addBookmark.g'\nimport { useAddCollectionMutation } from 'operations/portal/mutations/addCollection.g'\nimport { useAddWidgetMutation } from 'operations/portal/mutations/addWidget.g'\nimport { useEditCollectionMutation } from 'operations/portal/mutations/editCollection.g'\nimport { useRemoveBookmarkMutation } from 'operations/portal/mutations/removeBookmark.g'\nimport { useRemoveCollectionMutation } from 'operations/portal/mutations/removeCollection.g'\nimport GuardianIdealCarousel from 'components/GuardianIdeal/GuardianIdealCarousel'\nimport {\n  MySpaceWidget,\n  CMSBookmark,\n  Collection,\n  Widget,\n  Bookmark,\n} from 'types/index'\n\nimport { WIDGET_TYPES, MAXIMUM_COLLECTIONS } from 'constants/index'\nimport NewsWidget from 'components/NewsWidget/NewsWidget'\nimport CustomCollection from 'components/CustomCollection/CustomCollection'\nimport AddWidget from 'components/AddWidget/AddWidget'\nimport { GuardianIdealPillars } from 'components/GuardianIdeal/GuardianIdealPillars'\nimport { useAnalytics } from 'stores/analyticsContext'\nimport { useAuthContext } from 'stores/authContext'\nimport FeaturedShortcuts from 'components/FeaturedShortcuts/FeaturedShorcuts'\nimport { featuredShortcutItems } from 'components/FeaturedShortcuts/FeaturedShortcutItems'\n\n/** Type guards */\nfunction isCollection(widget: MySpaceWidget): widget is Collection {\n  return widget.type === WIDGET_TYPES.COLLECTION\n}\n\nfunction isGuardianIdeal(widget: Widget): widget is Collection {\n  return widget.type === WIDGET_TYPES.GUARDIANIDEAL\n}\n\nfunction isNewsWidget(widget: Widget): widget is Collection {\n  return widget.type === WIDGET_TYPES.NEWS\n}\n\nfunction isFeaturedShortcuts(widget: Widget): widget is Collection {\n  return widget.type === WIDGET_TYPES.FEATUREDSHORTCUTS\n}\n\nconst MySpace = ({ bookmarks }: { bookmarks: CMSBookmark[] }) => {\n  const router = useRouter()\n  const { trackEvent } = useAnalytics()\n  const { portalUser } = useAuthContext()\n  const flags = useFlags()\n\n  const mySpace = (portalUser?.mySpace || []) as MySpaceWidget[]\n\n  const [handleAddWidget] = useAddWidgetMutation()\n  const [handleRemoveBookmark] = useRemoveBookmarkMutation()\n  const [handleAddBookmark] = useAddBookmarkMutation()\n  const [handleRemoveCollection] = useRemoveCollectionMutation()\n  const [handleEditCollection] = useEditCollectionMutation()\n  const [handleAddCollection] = useAddCollectionMutation()\n\n  const addNewsWidget = () => {\n    trackEvent('Add section', 'Add news')\n\n    handleAddWidget({\n      variables: { title: 'Recent news', type: AddWidgetType.News },\n      refetchQueries: ['getUser'],\n    })\n  }\n\n  const addGuardianIdeal = () => {\n    trackEvent(\n      'Guardian Ideal Carousel',\n      'Click on add Ideal carousel',\n      'Add Ideal'\n    )\n\n    handleAddWidget({\n      variables: { title: 'Guardian Ideal', type: AddWidgetType.GuardianIdeal },\n      refetchQueries: ['getUser'],\n    })\n  }\n\n  const addFeaturedShortcuts = () => {\n    trackEvent(\n      'Featured Shortcuts',\n      'Click on add Featured Shortcuts',\n      'Add Featured Shortcuts'\n    )\n\n    handleAddWidget({\n      variables: {\n        title: 'Featured Shortcuts',\n        type: AddWidgetType.FeaturedShortcuts,\n      },\n      refetchQueries: ['getUser'],\n    })\n  }\n\n  const addNewCollection = () => {\n    trackEvent('Add section', 'Create new collection')\n\n    handleAddCollection({\n      variables: { title: '', bookmarks: [] },\n      refetchQueries: [`getUser`],\n    })\n  }\n\n  const canAddCollections: boolean =\n    mySpace &&\n    mySpace.filter((w) => isCollection(w)).length < MAXIMUM_COLLECTIONS\n\n  const canAddNews: boolean =\n    mySpace && mySpace.filter((w) => w.type === WIDGET_TYPES.NEWS).length < 1\n\n  const canAddGuardianIdeal: boolean =\n    mySpace &&\n    mySpace.filter((w) => w.type === WIDGET_TYPES.GUARDIANIDEAL).length < 1\n\n  const canAddFeaturedShortcuts: boolean =\n    mySpace &&\n    mySpace.filter((w) => w.type === WIDGET_TYPES.FEATUREDSHORTCUTS).length < 1\n\n  const selectCollections = () => {\n    trackEvent('Add section', 'Select collection from template')\n\n    router.push({\n      pathname: '/sites-and-applications',\n      query: { selectMode: 'true' },\n    })\n  }\n\n  return (\n    <div id=\"skip-announcements-carousel\" className={styles.mySpace}>\n      <div className={styles.widgetContainer}>\n        <h2 className={styles.pageTitle}>My Space</h2>\n        <Grid row gap={2}>\n          {portalUser &&\n            portalUser.mySpace &&\n            portalUser.mySpace.map((widget: Widget) => {\n              if (isGuardianIdeal(widget) && flags?.guardianIdealCarousel) {\n                return (\n                  <Grid\n                    key={`widget_${widget._id}`}\n                    className={styles.guardianIdeal}>\n                    <GuardianIdealCarousel\n                      ideals={GuardianIdealPillars}\n                      widget={widget}\n                    />\n                  </Grid>\n                )\n              }\n\n              if (isFeaturedShortcuts(widget) && flags?.featuredShortcuts) {\n                return (\n                  <Grid\n                    key={`widget_${widget._id}`}\n                    className={styles.featuredShortcuts}>\n                    <FeaturedShortcuts\n                      featuredShortcuts={featuredShortcutItems}\n                      widget={widget}\n                    />\n                  </Grid>\n                )\n              }\n\n              if (isNewsWidget(widget)) {\n                return (\n                  <Grid\n                    key={`widget_${widget._id}`}\n                    tabletLg={{ col: 6 }}\n                    desktopLg={{ col: 4 }}>\n                    <NewsWidget widget={widget} />\n                  </Grid>\n                )\n              }\n\n              if (isCollection(widget)) {\n                return (\n                  <Grid\n                    key={`widget_${widget._id}`}\n                    tabletLg={{ col: 6 }}\n                    desktopLg={{ col: 4 }}>\n                    <CustomCollection\n                      _id={widget._id}\n                      key={`widget_${widget._id}`}\n                      title={widget.title}\n                      type={widget.type}\n                      bookmarks={widget.bookmarks || []}\n                      bookmarkOptions={bookmarks}\n                      handleRemoveCollection={() => {\n                        handleRemoveCollection({\n                          variables: {\n                            _id: widget._id,\n                          },\n                          refetchQueries: [`getUser`],\n                        })\n                      }}\n                      handleEditCollection={(\n                        title: string,\n                        bookmarks?: Bookmark[]\n                      ) => {\n                        handleEditCollection({\n                          variables: {\n                            _id: widget._id,\n                            title,\n                            bookmarks,\n                          },\n                          optimisticResponse: {\n                            editCollection: {\n                              _id: widget._id,\n                              title,\n                              bookmarks: bookmarks || widget.bookmarks,\n                            },\n                          },\n                          update(cache, result) {\n                            if (result.data?.editCollection) {\n                              const { editCollection } = result.data\n                              cache.writeFragment({\n                                id: `Collection:${editCollection._id}`,\n                                fragment: gql`\n                                  fragment collectionData on Collection {\n                                    _id\n                                    title\n                                    bookmarks {\n                                      _id\n                                      url\n                                      label\n                                      cmsId\n                                      isRemoved\n                                    }\n                                  }\n                                `,\n                                data: editCollection,\n                              })\n                            }\n                          },\n                        })\n                      }}\n                      handleRemoveBookmark={(_id, cmsId) => {\n                        handleRemoveBookmark({\n                          variables: {\n                            _id,\n                            collectionId: widget._id,\n                            cmsId,\n                          },\n                          refetchQueries: [`getUser`],\n                        })\n                      }}\n                      handleAddBookmark={(url, label, id) => {\n                        handleAddBookmark({\n                          variables: {\n                            collectionId: widget._id,\n                            url,\n                            label,\n                            cmsId: id,\n                          },\n                          refetchQueries: [`getUser`],\n                        })\n                      }}\n                    />\n                  </Grid>\n                )\n              }\n              return null\n            })}\n\n          {(canAddCollections ||\n            canAddNews ||\n            canAddGuardianIdeal ||\n            canAddFeaturedShortcuts) && (\n            <Grid\n              key={`widget_addNew`}\n              tabletLg={{ col: 6 }}\n              desktopLg={{ col: 4 }}>\n              <AddWidget\n                handleCreateCollection={addNewCollection}\n                handleSelectCollection={selectCollections}\n                handleAddNews={addNewsWidget}\n                handleAddGuardianIdeal={addGuardianIdeal}\n                handleAddFeaturedShortcuts={addFeaturedShortcuts}\n                canAddNews={canAddNews}\n                canAddCollection={canAddCollections}\n                canAddGuardianIdeal={canAddGuardianIdeal}\n                canAddFeaturedShortcuts={canAddFeaturedShortcuts}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </div>\n    </div>\n  )\n}\n\nexport default MySpace\n","/* istanbul ignore file */\nimport * as Types from '../../../graphql.g';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type AddBookmarkMutationVariables = Types.Exact<{\n  url: Types.Scalars['String'];\n  label?: Types.InputMaybe<Types.Scalars['String']>;\n  collectionId: Types.Scalars['OID'];\n  cmsId?: Types.InputMaybe<Types.Scalars['ID']>;\n}>;\n\n\nexport type AddBookmarkMutation = { __typename?: 'Mutation', addBookmark?: { __typename?: 'Bookmark', _id: any, url: string, label?: string | null, cmsId?: string | null } | null };\n\n\nexport const AddBookmarkDocument = gql`\n    mutation addBookmark($url: String!, $label: String, $collectionId: OID!, $cmsId: ID) {\n  addBookmark(\n    url: $url\n    label: $label\n    collectionId: $collectionId\n    cmsId: $cmsId\n  ) {\n    _id\n    url\n    label\n    cmsId\n  }\n}\n    `;\nexport type AddBookmarkMutationFn = Apollo.MutationFunction<AddBookmarkMutation, AddBookmarkMutationVariables>;\n\n/**\n * __useAddBookmarkMutation__\n *\n * To run a mutation, you first call `useAddBookmarkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddBookmarkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addBookmarkMutation, { data, loading, error }] = useAddBookmarkMutation({\n *   variables: {\n *      url: // value for 'url'\n *      label: // value for 'label'\n *      collectionId: // value for 'collectionId'\n *      cmsId: // value for 'cmsId'\n *   },\n * });\n */\nexport function useAddBookmarkMutation(baseOptions?: Apollo.MutationHookOptions<AddBookmarkMutation, AddBookmarkMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddBookmarkMutation, AddBookmarkMutationVariables>(AddBookmarkDocument, options);\n      }\nexport type AddBookmarkMutationHookResult = ReturnType<typeof useAddBookmarkMutation>;\nexport type AddBookmarkMutationResult = Apollo.MutationResult<AddBookmarkMutation>;\nexport type AddBookmarkMutationOptions = Apollo.BaseMutationOptions<AddBookmarkMutation, AddBookmarkMutationVariables>;","/* istanbul ignore file */\nimport * as Types from '../../../graphql.g';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type RemoveBookmarkMutationVariables = Types.Exact<{\n  _id: Types.Scalars['OID'];\n  collectionId: Types.Scalars['OID'];\n  cmsId?: Types.InputMaybe<Types.Scalars['ID']>;\n}>;\n\n\nexport type RemoveBookmarkMutation = { __typename?: 'Mutation', removeBookmark?: { __typename?: 'Bookmark', _id: any } | null };\n\n\nexport const RemoveBookmarkDocument = gql`\n    mutation removeBookmark($_id: OID!, $collectionId: OID!, $cmsId: ID) {\n  removeBookmark(_id: $_id, collectionId: $collectionId, cmsId: $cmsId) {\n    _id\n  }\n}\n    `;\nexport type RemoveBookmarkMutationFn = Apollo.MutationFunction<RemoveBookmarkMutation, RemoveBookmarkMutationVariables>;\n\n/**\n * __useRemoveBookmarkMutation__\n *\n * To run a mutation, you first call `useRemoveBookmarkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveBookmarkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeBookmarkMutation, { data, loading, error }] = useRemoveBookmarkMutation({\n *   variables: {\n *      _id: // value for '_id'\n *      collectionId: // value for 'collectionId'\n *      cmsId: // value for 'cmsId'\n *   },\n * });\n */\nexport function useRemoveBookmarkMutation(baseOptions?: Apollo.MutationHookOptions<RemoveBookmarkMutation, RemoveBookmarkMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveBookmarkMutation, RemoveBookmarkMutationVariables>(RemoveBookmarkDocument, options);\n      }\nexport type RemoveBookmarkMutationHookResult = ReturnType<typeof useRemoveBookmarkMutation>;\nexport type RemoveBookmarkMutationResult = Apollo.MutationResult<RemoveBookmarkMutation>;\nexport type RemoveBookmarkMutationOptions = Apollo.BaseMutationOptions<RemoveBookmarkMutation, RemoveBookmarkMutationVariables>;","/* istanbul ignore file */\nimport * as Types from '../../../graphql.g';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type RemoveCollectionMutationVariables = Types.Exact<{\n  _id: Types.Scalars['OID'];\n}>;\n\n\nexport type RemoveCollectionMutation = { __typename?: 'Mutation', removeCollection?: { __typename?: 'Collection', _id: any } | null };\n\n\nexport const RemoveCollectionDocument = gql`\n    mutation removeCollection($_id: OID!) {\n  removeCollection(_id: $_id) {\n    _id\n  }\n}\n    `;\nexport type RemoveCollectionMutationFn = Apollo.MutationFunction<RemoveCollectionMutation, RemoveCollectionMutationVariables>;\n\n/**\n * __useRemoveCollectionMutation__\n *\n * To run a mutation, you first call `useRemoveCollectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveCollectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeCollectionMutation, { data, loading, error }] = useRemoveCollectionMutation({\n *   variables: {\n *      _id: // value for '_id'\n *   },\n * });\n */\nexport function useRemoveCollectionMutation(baseOptions?: Apollo.MutationHookOptions<RemoveCollectionMutation, RemoveCollectionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveCollectionMutation, RemoveCollectionMutationVariables>(RemoveCollectionDocument, options);\n      }\nexport type RemoveCollectionMutationHookResult = ReturnType<typeof useRemoveCollectionMutation>;\nexport type RemoveCollectionMutationResult = Apollo.MutationResult<RemoveCollectionMutation>;\nexport type RemoveCollectionMutationOptions = Apollo.BaseMutationOptions<RemoveCollectionMutation, RemoveCollectionMutationVariables>;"],"names":[],"sourceRoot":""}