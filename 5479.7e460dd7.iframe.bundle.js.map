{"version":3,"file":"5479.7e460dd7.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA","sources":["webpack://ussf-portal/./src/operations/portal/queries/getUser.g.ts"],"sourcesContent":["/* istanbul ignore file */\nimport * as Types from '../../../graphql.g';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type GetUserQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserQuery = { __typename?: 'Query', displayName: string, theme: string, mySpace: Array<{ __typename?: 'Collection', _id: any, title: string, type: Types.WidgetType, bookmarks?: Array<{ __typename?: 'Bookmark', _id: any, url: string, label?: string | null, cmsId?: string | null, isRemoved?: boolean | null }> | null } | { __typename?: 'FeaturedShortcuts', _id: any, title: string, type: Types.WidgetType } | { __typename?: 'GuardianIdeal', _id: any, title: string, type: Types.WidgetType } | { __typename?: 'NewsWidget', _id: any, title: string, type: Types.WidgetType } | { __typename?: 'WeatherWidget', _id: any, title: string, type: Types.WidgetType, coords: { __typename?: 'WeatherCoords', lat: number, long: number, forecastUrl: string, hourlyForecastUrl: string, city: string, state: string, zipcode: string } }> };\n\n\nexport const GetUserDocument = gql`\n    query getUser {\n  displayName\n  theme\n  mySpace {\n    _id\n    title\n    type\n    ... on Collection {\n      bookmarks {\n        _id\n        url\n        label\n        cmsId\n        isRemoved\n      }\n    }\n    ... on WeatherWidget {\n      coords {\n        lat\n        long\n        forecastUrl\n        hourlyForecastUrl\n        city\n        state\n        zipcode\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n      }\nexport function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;"],"names":[],"sourceRoot":""}