{"version":3,"file":"components-GuardianIdeal-GuardianIdealCarousel-stories.50206e0d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAsDA;;;;;;ACVA;;;;;;ACJA","sources":["webpack://ussf-portal/./src/operations/portal/mutations/addBookmark.g.ts","webpack://ussf-portal/./src/operations/portal/mutations/removeBookmark.g.ts","webpack://ussf-portal/./src/operations/portal/mutations/removeCollection.g.ts"],"sourcesContent":["/* istanbul ignore file */\nimport * as Types from '../../../graphql.g';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type AddBookmarkMutationVariables = Types.Exact<{\n  url: Types.Scalars['String'];\n  label?: Types.InputMaybe<Types.Scalars['String']>;\n  collectionId: Types.Scalars['OID'];\n  cmsId?: Types.InputMaybe<Types.Scalars['ID']>;\n}>;\n\n\nexport type AddBookmarkMutation = { __typename?: 'Mutation', addBookmark?: { __typename?: 'Bookmark', _id: any, url: string, label?: string | null, cmsId?: string | null } | null };\n\n\nexport const AddBookmarkDocument = gql`\n    mutation addBookmark($url: String!, $label: String, $collectionId: OID!, $cmsId: ID) {\n  addBookmark(\n    url: $url\n    label: $label\n    collectionId: $collectionId\n    cmsId: $cmsId\n  ) {\n    _id\n    url\n    label\n    cmsId\n  }\n}\n    `;\nexport type AddBookmarkMutationFn = Apollo.MutationFunction<AddBookmarkMutation, AddBookmarkMutationVariables>;\n\n/**\n * __useAddBookmarkMutation__\n *\n * To run a mutation, you first call `useAddBookmarkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddBookmarkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addBookmarkMutation, { data, loading, error }] = useAddBookmarkMutation({\n *   variables: {\n *      url: // value for 'url'\n *      label: // value for 'label'\n *      collectionId: // value for 'collectionId'\n *      cmsId: // value for 'cmsId'\n *   },\n * });\n */\nexport function useAddBookmarkMutation(baseOptions?: Apollo.MutationHookOptions<AddBookmarkMutation, AddBookmarkMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AddBookmarkMutation, AddBookmarkMutationVariables>(AddBookmarkDocument, options);\n      }\nexport type AddBookmarkMutationHookResult = ReturnType<typeof useAddBookmarkMutation>;\nexport type AddBookmarkMutationResult = Apollo.MutationResult<AddBookmarkMutation>;\nexport type AddBookmarkMutationOptions = Apollo.BaseMutationOptions<AddBookmarkMutation, AddBookmarkMutationVariables>;","/* istanbul ignore file */\nimport * as Types from '../../../graphql.g';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type RemoveBookmarkMutationVariables = Types.Exact<{\n  _id: Types.Scalars['OID'];\n  collectionId: Types.Scalars['OID'];\n  cmsId?: Types.InputMaybe<Types.Scalars['ID']>;\n}>;\n\n\nexport type RemoveBookmarkMutation = { __typename?: 'Mutation', removeBookmark?: { __typename?: 'Bookmark', _id: any } | null };\n\n\nexport const RemoveBookmarkDocument = gql`\n    mutation removeBookmark($_id: OID!, $collectionId: OID!, $cmsId: ID) {\n  removeBookmark(_id: $_id, collectionId: $collectionId, cmsId: $cmsId) {\n    _id\n  }\n}\n    `;\nexport type RemoveBookmarkMutationFn = Apollo.MutationFunction<RemoveBookmarkMutation, RemoveBookmarkMutationVariables>;\n\n/**\n * __useRemoveBookmarkMutation__\n *\n * To run a mutation, you first call `useRemoveBookmarkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveBookmarkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeBookmarkMutation, { data, loading, error }] = useRemoveBookmarkMutation({\n *   variables: {\n *      _id: // value for '_id'\n *      collectionId: // value for 'collectionId'\n *      cmsId: // value for 'cmsId'\n *   },\n * });\n */\nexport function useRemoveBookmarkMutation(baseOptions?: Apollo.MutationHookOptions<RemoveBookmarkMutation, RemoveBookmarkMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveBookmarkMutation, RemoveBookmarkMutationVariables>(RemoveBookmarkDocument, options);\n      }\nexport type RemoveBookmarkMutationHookResult = ReturnType<typeof useRemoveBookmarkMutation>;\nexport type RemoveBookmarkMutationResult = Apollo.MutationResult<RemoveBookmarkMutation>;\nexport type RemoveBookmarkMutationOptions = Apollo.BaseMutationOptions<RemoveBookmarkMutation, RemoveBookmarkMutationVariables>;","/* istanbul ignore file */\nimport * as Types from '../../../graphql.g';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type RemoveCollectionMutationVariables = Types.Exact<{\n  _id: Types.Scalars['OID'];\n}>;\n\n\nexport type RemoveCollectionMutation = { __typename?: 'Mutation', removeCollection?: { __typename?: 'Collection', _id: any } | null };\n\n\nexport const RemoveCollectionDocument = gql`\n    mutation removeCollection($_id: OID!) {\n  removeCollection(_id: $_id) {\n    _id\n  }\n}\n    `;\nexport type RemoveCollectionMutationFn = Apollo.MutationFunction<RemoveCollectionMutation, RemoveCollectionMutationVariables>;\n\n/**\n * __useRemoveCollectionMutation__\n *\n * To run a mutation, you first call `useRemoveCollectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveCollectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeCollectionMutation, { data, loading, error }] = useRemoveCollectionMutation({\n *   variables: {\n *      _id: // value for '_id'\n *   },\n * });\n */\nexport function useRemoveCollectionMutation(baseOptions?: Apollo.MutationHookOptions<RemoveCollectionMutation, RemoveCollectionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RemoveCollectionMutation, RemoveCollectionMutationVariables>(RemoveCollectionDocument, options);\n      }\nexport type RemoveCollectionMutationHookResult = ReturnType<typeof useRemoveCollectionMutation>;\nexport type RemoveCollectionMutationResult = Apollo.MutationResult<RemoveCollectionMutation>;\nexport type RemoveCollectionMutationOptions = Apollo.BaseMutationOptions<RemoveCollectionMutation, RemoveCollectionMutationVariables>;"],"names":[],"sourceRoot":""}